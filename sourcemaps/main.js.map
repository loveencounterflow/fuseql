{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'FUSE/run'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# immediately               = suspend.immediately\n# after                     = suspend.after\n# sleep                     = suspend.sleep\n#...........................................................................................................\nFUSE                      = require 'fuse-bindings'\nmount_route               = './mnt'\nmount_locator             = njs_path.resolve __dirname, mount_route\n#...........................................................................................................\nSQLITE3   = ( require 'sqlite3' ).verbose()\ndb_route  = 'fs.db'\n#...........................................................................................................\nwarn \"removing DB at #{db_route}\"\n( require 'fs' ).unlinkSync db_route\n#...........................................................................................................\ndb        = new SQLITE3.Database db_route\n# db        = new SQLITE3.Database ':memory:'\n\n\nfallback_time = 0\nfallback_size = 0\nfallback_mode = 0o100644\nfallback_uid  = 1000\nfallback_gid  = 1000\n\n\ndb.serialize ->\n  db.run 'CREATE TABLE IF NOT EXISTS lorem (info TEXT)'\n  db.run \"\"\"\n  CREATE TABLE IF NOT EXISTS main (\n      home    TEXT    NOT NULL\n    , name    TEXT    NOT NULL\n    , mtime   INTEGER NOT NULL DEFAULT #{fallback_time}\n    , atime   INTEGER NOT NULL DEFAULT #{fallback_time}\n    , ctime   INTEGER NOT NULL DEFAULT #{fallback_time}\n    , size    INTEGER NOT NULL DEFAULT #{fallback_size}\n    , mode    INTEGER NOT NULL DEFAULT #{fallback_mode}\n    , uid     INTEGER NOT NULL DEFAULT #{fallback_uid}\n    , gid     INTEGER NOT NULL DEFAULT #{fallback_gid}\n    -- , content BLOB\n    , content TEXT DEFAULT ''\n    , PRIMARY KEY ( home, name )\n    )\n  \"\"\"\n  statement = db.prepare 'INSERT INTO main ( home, name, content ) VALUES ( ?, ?, ? )'\n  for idx in [ 0 .. 10 ]\n    statement.run \"/\", \"file-#{idx}.txt\", \"Ipsum #{idx}\"\n  statement.finalize()\n  # db.each 'SELECT rowid AS id, info FROM lorem', ( error, record ) ->\n  #   throw error if error?\n  #   debug '©ZYjLy', record\n  #   help record.id + ': ' + record.info\n  #   return null\n  # return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nsqlitefs =\n\n  #---------------------------------------------------------------------------------------------------------\n  readdir: ( route, handler ) ->\n    echo 'readdir(%s)', route\n    sql = \"\"\"\n      SELECT  home, name\n      FROM    main\n      WHERE   home = ?\n      \"\"\"\n    Z = []\n    # db.serialize =>\n      # statement = db.prepare sql\n      # statement.run route\n    on_data = ( error, record ) ->\n      throw error if error?\n      { home, name, } = record\n      route = home + name\n      Z.push route\n      debug '©ZYjLy', record\n    db.each sql, route, on_data, ( error, count ) =>\n      throw error if error?\n      help \"retrieved #{count} records\"\n      handler null, Z\n  # if route == '/'\n    #   filenames = ( \"file-#{idx}\" for idx in [ 0 .. 10 ] )\n    #   filenames.push 'test'\n    #   return handler null, filenames\n    # handler null\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  getattr: ( route, handler ) ->\n    info \"getattr #{rpr route}\"\n    switch route\n      when '/' #, '/._.', '/.hidden', '/mach_kernel'\n        handler null,\n          mtime: new Date\n          atime: new Date\n          ctime: new Date\n          size: 100\n          mode: 16877\n          uid: process.getuid()\n          gid: process.getgid()\n      else\n        unless ( /^\\/[^\\/]+/ ).test route\n          return handler new Error \"illegal route #{rpr route}\"\n        home = route[ 0 ]\n        name = route[ 1 .. ]\n        sql = \"\"\"\n          SELECT  home, name, mtime, atime, ctime, size, mode, uid, gid, content\n          FROM    main\n          WHERE   home = ? AND name = ?\n          \"\"\"\n        db.get sql, home, name, ( error, record ) ->\n          throw error if error?\n          return handler null unless record?\n          debug '©nUEmT', record\n          { home\n            name\n            mtime\n            atime\n            ctime\n            size\n            mode\n            uid\n            gid\n            content   } = record\n          # route         = home + name\n          handler null,\n            mtime:  mtime\n            atime:  atime\n            ctime:  ctime\n            size:   size\n            mode:   mode\n            uid:    uid\n            gid:    gid\n      # else\n      #   handler FUSE.ENOENT\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  open: (route, flags, handler) ->\n    info 'open(%s, %d)', route, flags\n    handler 0, 42\n    # 42 is an fd\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  read: ( route, fd, buf, len, pos, handler ) ->\n    info 'read(%s, %d, %d, %d)', route, fd, len, pos\n    relative_route  = route\n    relative_route  = \"/#{route}\" unless relative_route[ 0 ] is '/'\n    relative_route  = \".#{route}\" unless relative_route[ 0 ] is '.'\n    locator         = njs_path.resolve mount_locator, relative_route\n    info '©jQFeh', relative_route\n    info '©Qpb1T', mount_locator\n    info '©zZVe3', locator\n    content = \"\"\"\n      hello world\n      from #{locator}\n      \\n\"\"\"\n    content = content.slice(pos)\n    if !content\n      return handler(0)\n    buf.write content\n    handler content.length\n\n#-----------------------------------------------------------------------------------------------------------\n# FUSE.mount mount_route, demofs\nFUSE.mount mount_route, sqlitefs\n\n#-----------------------------------------------------------------------------------------------------------\nprocess.on 'SIGINT', ->\n  info \"unmounting...\"\n  db.close()\n  FUSE.unmount mount_route, ->\n    info \"done\"\n    process.exit()\n    return\n  return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}