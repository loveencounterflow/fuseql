{"version":3,"sources":["main.coffee"],"names":[],"mappings":"AAKA;AAAA,MAAA,iRAAA;IAAA;;EAAA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAG5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAb;;EAC5B,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA0B,KAA1B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAO5B,KAAA,GAA4B;;EAE5B,IAAA,GAA4B,OAAA,CAAQ,eAAR;;EAC5B,WAAA,GAA4B;;EAC5B,aAAA,GAA4B,QAAQ,CAAC,OAAT,CAAiB,SAAjB,EAA4B,WAA5B;;EAE5B,OAAA,GAAY,CAAE,OAAA,CAAQ,SAAR,CAAF,CAAqB,CAAC,OAAtB,CAAA;;EACZ,QAAA,GAAY;;EAEZ,IAAA,CAAK,iBAAA,GAAkB,QAAvB;;EACA,CAAE,OAAA,CAAQ,IAAR,CAAF,CAAgB,CAAC,UAAjB,CAA4B,QAA5B;;EAEA,EAAA,GAAgB,IAAA,OAAO,CAAC,QAAR,CAAiB,QAAjB;;EAKhB,aAAA,GAAgB,CAAK,IAAA,IAAA,CAAA;;EACrB,aAAA,GAAgB;;EAChB,aAAA,GAAgB;;EAChB,YAAA,GAAgB,OAAO,CAAC,MAAR,CAAA;;EAChB,YAAA,GAAgB,OAAO,CAAC,MAAR,CAAA;;EAGhB,EAAE,CAAC,SAAH,CAAa,SAAA;AACX,QAAA;IAAA,EAAE,CAAC,GAAH,CAAO,8CAAP;IACA,EAAE,CAAC,GAAH,CAAO,sIAAA,GAIgC,aAJhC,GAI8C,yCAJ9C,GAKgC,aALhC,GAK8C,yCAL9C,GAMgC,aANhC,GAM8C,yCAN9C,GAOgC,aAPhC,GAO8C,yCAP9C,GAQgC,aARhC,GAQ8C,yCAR9C,GASgC,YAThC,GAS6C,yCAT7C,GAUgC,YAVhC,GAU6C,yFAVpD;IAgBA,SAAA,GAAY,EAAE,CAAC,OAAH,CAAW,sEAAX;AACZ,SAAW,+BAAX;MACE,IAAA,GAAU,OAAA,GAAQ,GAAR,GAAY;MACtB,OAAA,GAAU,mBAAA,GACW,IADX,GACgB;MAE1B,MAAA,GAAS,MAAM,CAAC,UAAP,CAAkB,OAAlB,EAA2B,OAA3B;MACT,SAAS,CAAC,GAAV,CAAc,GAAd,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC,OAAjC;AANF;WAOA,SAAS,CAAC,QAAV,CAAA;EA1BW,CAAb;;EAoCA,YAAA,GACE;IAAA,IAAA,EAAc,CAAd;IACA,OAAA,EAAc,CAAC,CADf;;;EAIF,cAAA,GAAiB,SAAE,KAAF;WAAe,WAAa,CAAC,IAAhB,CAAqB,KAArB;EAAb;;EAGjB,WAAA,GAAc,SAAE,KAAF;WAAa,CAAE,KAAO,CAAA,CAAA,CAAT,EAAc,KAAO,SAArB;EAAb;;EAGd,QAAA,GAGE;IAAA,aAAA,EAAgB,IAAhB;IACA,KAAA,EAAgB,IADhB;IAIA,OAAA,EAAS,SAAE,KAAF,EAAS,OAAT;AACP,UAAA;MAAA,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAvB;MACA,GAAA,GAAM;MAKN,CAAA,GAAI;MAIJ,OAAA,GAAU,SAAE,KAAF,EAAS,MAAT;AACR,YAAA;QAAA,IAAe,aAAf;AAAA,gBAAM,MAAN;;QACE,cAAA,IAAF,EAAQ,cAAA;eAER,CAAC,CAAC,IAAF,CAAO,IAAP;MAJQ;MAKV,EAAE,CAAC,IAAH,CAAQ,GAAR,EAAa,KAAb,EAAoB,OAApB,EAA6B,CAAA,SAAA,KAAA;eAAA,SAAE,KAAF,EAAS,KAAT;UAC3B,IAAe,aAAf;AAAA,kBAAM,MAAN;;UACA,IAAA,CAAK,YAAA,GAAa,KAAb,GAAmB,UAAxB;UACA,KAAA,CAAM,QAAN,EAAgB,CAAhB;iBACA,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EAA8B,CAA9B;QAJ2B;MAAA,CAAA,CAAA,CAAA,IAAA,CAA7B;IAhBO,CAJT;IAiCA,OAAA,EAAS,SAAE,KAAF,EAAS,OAAT;AACP,UAAA;MAAA,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAvB;AACA,cAAO,KAAP;AAAA,aACO,GADP;UAEI,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EACE;YAAA,KAAA,EAAW,IAAA,IAAA,CAAA,CAAX;YACA,KAAA,EAAW,IAAA,IAAA,CAAA,CADX;YAEA,KAAA,EAAW,IAAA,IAAA,CAAA,CAFX;YAGA,IAAA,EAAM,GAHN;YAIA,IAAA,EAAM,KAJN;YAKA,GAAA,EAAK,OAAO,CAAC,MAAR,CAAA,CALL;YAMA,GAAA,EAAK,OAAO,CAAC,MAAR,CAAA,CANL;WADF;AADG;AADP;UAWI,IAAA,CAA4E,cAAA,CAAe,KAAf,CAA5E;AAAA,mBAAO,OAAA,CAAQ,YAAc,CAAA,OAAA,CAAtB,EAAiC,gBAAA,GAAgB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAjD,EAAP;;UACA,MAAkB,WAAA,CAAY,KAAZ,CAAlB,EAAE,aAAF,EAAQ;UACR,GAAA,GAAM;UAKN,EAAE,CAAC,GAAH,CAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,SAAE,KAAF,EAAS,MAAT;AACtB,gBAAA;YAAA,IAAe,aAAf;AAAA,oBAAM,MAAN;;YACA,IAA2C,cAA3C;AAAA,qBAAO,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EAAP;;YAYA,gBAAA,GACE;cAAA,KAAA,EAAY,IAAA,IAAA,CAAK,MAAQ,CAAA,OAAA,CAAb,CAAZ;cACA,KAAA,EAAY,IAAA,IAAA,CAAK,MAAQ,CAAA,OAAA,CAAb,CADZ;cAEA,KAAA,EAAY,IAAA,IAAA,CAAK,MAAQ,CAAA,OAAA,CAAb,CAFZ;cAGA,IAAA,EAAQ,MAAQ,CAAA,MAAA,CAHhB;cAIA,IAAA,EAAQ,MAAQ,CAAA,MAAA,CAJhB;cAKA,GAAA,EAAQ,MAAQ,CAAA,KAAA,CALhB;cAMA,GAAA,EAAQ,MAAQ,CAAA,KAAA,CANhB;;YAOF,KAAA,CAAM,QAAN,EAAgB,gBAAhB;mBACA,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EAA8B,gBAA9B;UAvBsB,CAAxB;AAlBJ;AA4CA,aAAO;IA9CA,CAjCT;IAkFA,IAAA,EAAM,SAAE,KAAF,EAAS,KAAT,EAAgB,OAAhB;MACJ,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAlB,GAA6B,IAA7B,GAAgC,CAAC,GAAA,CAAI,KAAJ,CAAD,CAArC;MAEA,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EAA8B,EAA9B;IAHI,CAlFN;IAyFA,IAAA,EAAM,SAAE,KAAF,EAAS,EAAT,EAAa,MAAb,EAAqB,MAArB,EAA6B,QAA7B,EAAuC,OAAvC;AACJ,UAAA;MAAA,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAlB,GAA6B,IAA7B,GAAgC,CAAC,GAAA,CAAI,EAAJ,CAAD,CAAhC,GAAwC,IAAxC,GAA2C,CAAC,GAAA,CAAI,MAAJ,CAAD,CAA3C,GAAuD,IAAvD,GAA0D,CAAC,GAAA,CAAI,MAAJ,CAAD,CAA1D,GAAsE,IAAtE,GAAyE,CAAC,GAAA,CAAI,QAAJ,CAAD,CAA9E;MACA,IAAA,CAA4E,cAAA,CAAe,KAAf,CAA5E;AAAA,eAAO,OAAA,CAAQ,YAAc,CAAA,OAAA,CAAtB,EAAiC,gBAAA,GAAgB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAjD,EAAP;;MACA,MAAkB,WAAA,CAAY,KAAZ,CAAlB,EAAE,aAAF,EAAQ;MACR,GAAA,GAAkB;MAKlB,EAAE,CAAC,GAAH,CAAO,GAAP,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,SAAE,KAAF,EAAS,MAAT;AACtB,YAAA;QAAA,IAAe,aAAf;AAAA,gBAAM,MAAN;;QACA,IAA2C,cAA3C;AAAA,iBAAO,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EAAP;;QACA,KAAA,CAAM,QAAN,EAAgB,MAAhB;QACE,UAAY,OAAZ;QACF,OAAA,GAAc,OAAO,CAAC,KAAR,CAAc,QAAd;QACd,IAAoB,OAAO,CAAC,MAAR,KAAkB,CAAtC;AAAA,iBAAO,OAAA,CAAQ,CAAR,EAAP;;;AACA;QACA,MAAM,CAAC,KAAP,CAAa,OAAb,EAAsB,OAAtB;eACA,OAAA,CAAQ,MAAM,CAAC,UAAP,CAAkB,OAAlB,EAA2B,OAA3B,CAAR;MATsB,CAAxB;AAUA,aAAO;IAnBH,CAzFN;IA+GA,KAAA,EAAO,SAAE,KAAF,EAAS,EAAT,EAAa,MAAb,EAAqB,MAArB,EAA6B,QAA7B,EAAuC,OAAvC;AACL,UAAA;MAAA,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAlB,GAA6B,IAA7B,GAAgC,CAAC,GAAA,CAAI,EAAJ,CAAD,CAAhC,GAAwC,IAAxC,GAA2C,CAAC,GAAA,CAAI,MAAJ,CAAD,CAA3C,GAAuD,IAAvD,GAA0D,CAAC,GAAA,CAAI,MAAJ,CAAD,CAA1D,GAAsE,IAAtE,GAAyE,CAAC,GAAA,CAAI,QAAJ,CAAD,CAA9E;MACA,IAAA,GAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,MAAhB;MACP,KAAA,CAAM,QAAN,EAAgB,IAAhB;MACA,KAAA,CAAM,QAAN,EAAgB,IAAI,CAAC,QAAL,CAAA,CAAhB;aACA,OAAA,CAAQ,EAAR;IALK,CA/GP;IAqIA,MAAA,EAAQ,SAAE,KAAF,EAAS,IAAT,EAAe,OAAf;MACN,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAlB,GAA6B,IAA7B,GAAgC,CAAC,GAAA,CAAI,IAAJ,CAAD,CAArC;aACA,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB;IAFM,CArIR;IA0IA,OAAA,EAAS,SAAE,KAAF,EAAS,EAAT,EAAa,OAAb;MACP,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAlB,GAA6B,IAA7B,GAAgC,CAAC,GAAA,CAAI,EAAJ,CAAD,CAArC;aACA,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB;IAFO,CA1IT;IA+IA,MAAA,EAAQ,SAAE,KAAF,EAAS,OAAT;AACN,UAAA;MAAA,IAAA,CAAK,kBAAA,GAAkB,CAAC,GAAA,CAAI,KAAJ,CAAD,CAAvB;MACA,cAAA,GACE;QAAA,KAAA,EAAU,OAAV;QACA,MAAA,EAAU,OADV;QAEA,MAAA,EAAU,OAFV;QAGA,KAAA,EAAU,OAHV;QAIA,MAAA,EAAU,OAJV;QAKA,KAAA,EAAU,OALV;QAMA,KAAA,EAAU,OANV;QAOA,MAAA,EAAU,OAPV;QAQA,IAAA,EAAU,OARV;QASA,IAAA,EAAU,OATV;QAUA,OAAA,EAAU,OAVV;;aAWF,OAAA,CAAQ,YAAc,CAAA,IAAA,CAAtB,EAA8B,cAA9B;IAdM,CA/IR;;;EAgKC,CAAA,SAAA;AACD,QAAA;IAAA,KAAA,GAAQ,6OAGwB,CAAC,KAHzB,CAG+B,KAH/B;AAIR;SAAA,uCAAA;;MACE,IAAY,sBAAZ;AAAA,iBAAA;;AACA,cAAA,KAAA;AAAA,cACO,MADP;AAAA,cACe,QADf;AAAA,cACyB,SADzB;AAEI;AAFJ;uBAIO,CAAA,SAAE,IAAF;AACD,gBAAA;YAAA,OAAA,GAAU,mBAAA,GAAoB;mBAC9B,QAAU,CAAA,IAAA,CAAV,GAAmB,SAAA;AACjB,kBAAA;cADmB,8FAAM;cACzB,IAAA,CAAK,OAAL;qBACA,OAAA,CAAQ,YAAc,CAAA,OAAA,CAAtB,EAAiC,OAAjC;YAFiB;UAFlB,CAAA,CAAH,CAAK,IAAL;AAJJ;AAFF;;EALC,CAAA,CAAH,CAAA;;EAmBA,IAAI,CAAC,KAAL,CAAW,WAAX,EAAwB,QAAxB;;EAGA,OAAO,CAAC,EAAR,CAAW,QAAX,EAAqB,SAAA;IACnB,IAAA,CAAK,eAAL;IACA,EAAE,CAAC,KAAH,CAAA;IACA,IAAI,CAAC,OAAL,CAAa,WAAb,EAA0B,SAAA;MACxB,IAAA,CAAK,MAAL;MACA,OAAO,CAAC,IAAR,CAAA;IAFwB,CAA1B;EAHmB,CAArB;AArRA","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'FUSEQL/main'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# immediately               = suspend.immediately\n# after                     = suspend.after\n# sleep                     = suspend.sleep\nlater                     = setImmediate\n#...........................................................................................................\nFUSE                      = require 'fuse-bindings'\nmount_route               = './mnt'\nmount_locator             = njs_path.resolve __dirname, mount_route\n#...........................................................................................................\nSQLITE3   = ( require 'sqlite3' ).verbose()\ndb_route  = 'fs.db'\n#...........................................................................................................\nwarn \"removing DB at #{db_route}\"\n( require 'fs' ).unlinkSync db_route\n#...........................................................................................................\ndb        = new SQLITE3.Database db_route\n# db        = new SQLITE3.Database ':memory:'\n\n\n\nfallback_time = +new Date()\nfallback_size = 100\nfallback_mode = 0o100644\nfallback_uid  = process.getuid()\nfallback_gid  = process.getgid()\n\n\ndb.serialize ->\n  db.run 'CREATE TABLE IF NOT EXISTS lorem (info TEXT)'\n  db.run \"\"\"\n  CREATE TABLE IF NOT EXISTS main (\n      home    TEXT    NOT NULL\n    , name    TEXT    NOT NULL\n    , mtime   INTEGER NOT NULL DEFAULT #{fallback_time}\n    , atime   INTEGER NOT NULL DEFAULT #{fallback_time}\n    , ctime   INTEGER NOT NULL DEFAULT #{fallback_time}\n    , size    INTEGER NOT NULL DEFAULT #{fallback_size}\n    , mode    INTEGER NOT NULL DEFAULT #{fallback_mode}\n    , uid     INTEGER NOT NULL DEFAULT #{fallback_uid}\n    , gid     INTEGER NOT NULL DEFAULT #{fallback_gid}\n    -- , content BLOB\n    , content TEXT DEFAULT ''\n    , PRIMARY KEY ( home, name )\n    )\n  \"\"\"\n  statement = db.prepare 'INSERT INTO main ( home, name, size, content ) VALUES ( ?, ?, ?, ? )'\n  for idx in [ 0 .. 10 ]\n    name    = \"file-#{idx}.txt\"\n    content = \"\"\"\n      hello world from #{name}\\n\n      \"\"\"\n    length = Buffer.byteLength content, 'utf-8'\n    statement.run \"/\", name, length, content\n  statement.finalize()\n  # db.each 'SELECT rowid AS id, info FROM lorem', ( error, record ) ->\n  #   throw error if error?\n  #   debug '©ZYjLy', record\n  #   help record.id + ': ' + record.info\n  #   return null\n  # return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nresult_codes =\n  'ok':         0\n  'error':      -1\n\n#-----------------------------------------------------------------------------------------------------------\nis_valid_route = ( route ) -> ( /^\\/[^\\/]+/ ).test route\n\n#-----------------------------------------------------------------------------------------------------------\nsplit_route = ( route ) -> [ route[ 0 ], route[ 1 .. ], ]\n\n#-----------------------------------------------------------------------------------------------------------\nsqlitefs =\n\n  #---------------------------------------------------------------------------------------------------------\n  displayFolder:  yes\n  force:          yes\n\n  #---------------------------------------------------------------------------------------------------------\n  readdir: ( route, handler ) ->\n    echo \"readdir         #{rpr route}\"\n    sql = \"\"\"\n      SELECT  home, name\n      FROM    main\n      WHERE   home = ?\n      \"\"\"\n    Z = []\n    # db.serialize =>\n      # statement = db.prepare sql\n      # statement.run route\n    on_data = ( error, record ) ->\n      throw error if error?\n      { home, name, } = record\n      # route = home + name\n      Z.push name\n    db.each sql, route, on_data, ( error, count ) =>\n      throw error if error?\n      help \"retrieved #{count} records\"\n      debug '©U47Yh', Z\n      handler result_codes[ 'ok' ], Z\n  # if route == '/'\n    #   filenames = ( \"file-#{idx}\" for idx in [ 0 .. 10 ] )\n    #   filenames.push 'test'\n    #   return handler result_codes[ 'ok' ], filenames\n    # handler result_codes[ 'ok' ]\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  getattr: ( route, handler ) ->\n    info \"getattr         #{rpr route}\"\n    switch route\n      when '/' #, '/._.', '/.hidden', '/mach_kernel'\n        handler result_codes[ 'ok' ],\n          mtime: new Date()\n          atime: new Date()\n          ctime: new Date()\n          size: 100\n          mode: 16877\n          uid: process.getuid()\n          gid: process.getgid()\n      else\n        return handler result_codes[ 'error' ], \"illegal route #{rpr route}\" unless is_valid_route route\n        [ home, name, ] = split_route route\n        sql = \"\"\"\n          SELECT  mtime, atime, ctime, size, mode, uid, gid\n          FROM    main\n          WHERE   home = ? AND name = ?\n          \"\"\"\n        db.get sql, home, name, ( error, record ) ->\n          throw error if error?\n          return handler result_codes[ 'ok' ] unless record?\n          # debug '©nUEmT', record\n          # { home\n          #   name\n          #   mtime\n          #   atime\n          #   ctime\n          #   size\n          #   mode\n          #   uid\n          #   gid     } = record\n          # # route         = home + name\n          file_description =\n            mtime:  new Date record[ 'mtime' ]\n            atime:  new Date record[ 'atime' ]\n            ctime:  new Date record[ 'ctime' ]\n            size:   record[ 'size'  ]\n            mode:   record[ 'mode'  ]\n            uid:    record[ 'uid'   ]\n            gid:    record[ 'gid'   ]\n          debug '©hFS9F', file_description\n          handler result_codes[ 'ok' ], file_description\n      # else\n      #   handler FUSE.ENOENT\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  open: ( route, flags, handler ) ->\n    info \"open            #{rpr route}, #{rpr flags}\"\n    # 42 is an fd\n    handler result_codes[ 'ok' ], 42\n    return\n\n  #---------------------------------------------------------------------------------------------------------\n  read: ( route, fd, buffer, length, position, handler ) ->\n    info \"read            #{rpr route}, #{rpr fd}, #{rpr buffer}, #{rpr length}, #{rpr position}\"\n    return handler result_codes[ 'error' ], \"illegal route #{rpr route}\" unless is_valid_route route\n    [ home, name, ] = split_route route\n    sql             = \"\"\"\n      SELECT  content\n      FROM    main\n      WHERE   home = ? AND name = ?\n      \"\"\"\n    db.get sql, home, name, ( error, record ) ->\n      throw error if error?\n      return handler result_codes[ 'ok' ] unless record?\n      debug '©B30YQ', record\n      { content } = record\n      content     = content.slice position\n      return handler 0 if content.length is 0\n      ### TAINT content must not be longer than buffer ###\n      buffer.write content, 'utf-8'\n      handler Buffer.byteLength content, 'utf-8'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  write: ( route, fd, buffer, length, position, handler ) ->\n    info \"write           #{rpr route}, #{rpr fd}, #{rpr buffer}, #{rpr length}, #{rpr position}\"\n    data = buffer.slice 0, length\n    debug '©pqgx3', data\n    debug '©pqgx3', data.toString()\n    handler 10\n    # db.serialize ->\n    #   sql = \"\"\"\n    #     INSERT INTO main\n    #       ( home, name, size, content )\n    #       VALUES ( ?, ?, ?, ? )\"\"\"\n    #   statement = db.prepare sql\n    #   for idx in [ 0 .. 10 ]\n    #     name    = \"file-#{idx}.txt\"\n    #     content = \"\"\"\n    #       hello world from #{name}\\n\n    #       \"\"\"\n    #     length = Buffer.byteLength content, 'utf-8'\n    #     statement.run \"/\", name, length, content\n    #   statement.finalize()\n\n  #---------------------------------------------------------------------------------------------------------\n  access: ( route, mode, handler ) ->\n    info \"access          #{rpr route}, #{rpr mode}\"\n    handler result_codes[ 'ok' ]\n\n  #---------------------------------------------------------------------------------------------------------\n  release: ( route, fd, handler ) ->\n    info \"release         #{rpr route}, #{rpr fd}\"\n    handler result_codes[ 'ok' ]\n\n  #---------------------------------------------------------------------------------------------------------\n  statfs: ( route, handler ) ->\n    info \"statfs          #{rpr route}\"\n    fs_description =\n      bsize:    1000000\n      frsize:   1000000\n      blocks:   1000000\n      bfree:    1000000\n      bavail:   1000000\n      files:    1000000\n      ffree:    1000000\n      favail:   1000000\n      fsid:     1000000\n      flag:     1000000\n      namemax:  1000000\n    handler result_codes[ 'ok' ], fs_description\n\n#-----------------------------------------------------------------------------------------------------------\ndo ->\n  names = \"\"\"\n  access chmod chown create destroy fgetattr flush fsync fsyncdir ftruncate getattr getxattr init link\n  mkdir mknod open opendir read readdir readlink release releasedir rename rmdir setxattr statfs symlink\n  truncate unlink utimens write\"\"\".split /\\s+/\n  for name in names\n    continue if sqlitefs[ name ]?\n    switch\n      when 'init', 'statfs', 'destroy'\n        continue\n      else\n        do ( name ) ->\n          message = \"not implemented: #{name}\"\n          sqlitefs[ name ] = ( _..., handler ) ->\n            warn message\n            handler result_codes[ 'error' ], message\n\n#-----------------------------------------------------------------------------------------------------------\n# FUSE.mount mount_route, ( require './demofs' )\nFUSE.mount mount_route, sqlitefs\n\n#-----------------------------------------------------------------------------------------------------------\nprocess.on 'SIGINT', ->\n  warn \"unmounting...\"\n  db.close()\n  FUSE.unmount mount_route, ->\n    info \"done\"\n    process.exit()\n    return\n  return\n\n\n\n\n\n\n\n\n\n\n\n"]}